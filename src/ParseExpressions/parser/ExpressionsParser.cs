//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\repos-clones\getting-started-with-antlr-in-csharp\src\ParseExpressions\Expressions.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExpressionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, NEWLINE=31, 
		IDENTIFIER=32, CONSTANT=33, STRING=34, INTEGER=35, FLOAT=36, SKIP_=37;
	public const int
		RULE_expression = 0, RULE_argList = 1, RULE_functionCall = 2, RULE_literal = 3;
	public static readonly string[] ruleNames = {
		"expression", "argList", "functionCall", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'('", "')'", "'['", "']'", "'.'", "'$'", "'/'", 
		"'-'", "'+'", "'*'", "'%'", "'^'", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'!'", "'not'", "'and'", "'&&'", "'or'", "'||'", "','", "'alpha'", 
		"'beta'", "'gamma'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NEWLINE", "IDENTIFIER", "CONSTANT", 
		"STRING", "INTEGER", "FLOAT", "SKIP_"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MinusContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JumpLiteralContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public JumpLiteralContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitJumpLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparisonContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicOrContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubscriptionContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitSubscription(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlusContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicAndContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExpressionContext {
		public BooleanContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesesContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParentesesContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitParenteses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXorContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitXorContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitBitXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetNodeContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(ExpressionsParser.STRING, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ExpressionsParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ExpressionsParser.IDENTIFIER, i);
		}
		public GetNodeContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitGetNode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AttributeContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionsParser.IDENTIFIER, 0); }
		public AttributeContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FactorContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicNotContext(ExpressionContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 9; Match(T__0);
				}
				break;
			case T__1:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 10; Match(T__1);
				}
				break;
			case IDENTIFIER:
			case CONSTANT:
			case STRING:
			case INTEGER:
			case FLOAT:
				{
				_localctx = new JumpLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11; literal();
				}
				break;
			case T__27:
			case T__28:
			case T__29:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12; functionCall();
				}
				break;
			case T__2:
				{
				_localctx = new ParentesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13; Match(T__2);
				State = 14; expression(0);
				State = 15; Match(T__3);
				}
				break;
			case T__7:
				{
				_localctx = new GetNodeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 17; Match(T__7);
				State = 27;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
					{
					State = 18; Match(STRING);
					}
					break;
				case IDENTIFIER:
					{
					State = 19; Match(IDENTIFIER);
					State = 24;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 20; Match(T__8);
							State = 21; Match(IDENTIFIER);
							}
							} 
						}
						State = 26;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__9:
			case T__10:
				{
				_localctx = new SignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29;
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==T__10) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 30; expression(9);
				}
				break;
			case T__20:
			case T__21:
				{
				_localctx = new LogicNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31;
				_la = TokenStream.LA(1);
				if ( !(_la==T__20 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 32; expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 64;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new FactorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 35;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 36;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__11) | (1L << T__12))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 37; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new PlusContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 38;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 39; Match(T__10);
						State = 40; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new MinusContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 41;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 42; Match(T__9);
						State = 43; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new BitXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 44;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 45; Match(T__13);
						State = 46; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 47;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 48;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 49; expression(5);
						}
						break;
					case 6:
						{
						_localctx = new LogicAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 50;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 51;
						_la = TokenStream.LA(1);
						if ( !(_la==T__22 || _la==T__23) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 52; expression(3);
						}
						break;
					case 7:
						{
						_localctx = new LogicOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 53;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 54;
						_la = TokenStream.LA(1);
						if ( !(_la==T__24 || _la==T__25) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 55; expression(2);
						}
						break;
					case 8:
						{
						_localctx = new SubscriptionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 57; Match(T__4);
						State = 58; expression(0);
						State = 59; Match(T__5);
						}
						break;
					case 9:
						{
						_localctx = new AttributeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 61;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 62; Match(T__6);
						State = 63; Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 2, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; expression(0);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 70; Match(T__26);
				State = 71; expression(0);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlphaContext : FunctionCallContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AlphaContext(FunctionCallContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitAlpha(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetaContext : FunctionCallContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BetaContext(FunctionCallContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitBeta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GammaContext : FunctionCallContext {
		public GammaContext(FunctionCallContext context) { CopyFrom(context); }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitGamma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionCall);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				_localctx = new AlphaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; Match(T__27);
				State = 78; Match(T__2);
				State = 79; expression(0);
				State = 80; Match(T__26);
				State = 81; expression(0);
				State = 82; Match(T__3);
				}
				break;
			case T__28:
				_localctx = new BetaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; Match(T__28);
				State = 85; Match(T__2);
				State = 86; expression(0);
				State = 87; Match(T__3);
				}
				break;
			case T__29:
				_localctx = new GammaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; Match(T__29);
				State = 90; Match(T__2);
				State = 91; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ExpressionsParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(ExpressionsParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(ExpressionsParser.FLOAT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionsParser.IDENTIFIER, 0); }
		public ITerminalNode CONSTANT() { return GetToken(ExpressionsParser.CONSTANT, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TExpression Accept<TExpression>(IParseTreeVisitor<TExpression> visitor) {
			IExpressionsVisitor<TExpression> typedVisitor = visitor as IExpressionsVisitor<TExpression>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 6, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << CONSTANT) | (1L << STRING) | (1L << INTEGER) | (1L << FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\x63', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x19', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1C', '\v', '\x2', '\x5', '\x2', 
		'\x1E', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '$', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x43', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x46', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', 'K', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'N', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '_', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\t', '\x3', 
		'\x2', '\f', '\r', '\x3', '\x2', '\x17', '\x18', '\x4', '\x2', '\v', '\v', 
		'\xE', '\xF', '\x3', '\x2', '\x11', '\x16', '\x3', '\x2', '\x19', '\x1A', 
		'\x3', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\"', '&', '\x2', 's', '\x2', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x4', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '^', '\x3', '\x2', '\x2', '\x2', '\b', '`', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\v', '\b', '\x2', '\x1', '\x2', '\v', '$', '\a', '\x3', 
		'\x2', '\x2', '\f', '$', '\a', '\x4', '\x2', '\x2', '\r', '$', '\x5', 
		'\b', '\x5', '\x2', '\xE', '$', '\x5', '\x6', '\x4', '\x2', '\xF', '\x10', 
		'\a', '\x5', '\x2', '\x2', '\x10', '\x11', '\x5', '\x2', '\x2', '\x2', 
		'\x11', '\x12', '\a', '\x6', '\x2', '\x2', '\x12', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x1D', '\a', '\n', '\x2', '\x2', '\x14', '\x1E', 
		'\a', '$', '\x2', '\x2', '\x15', '\x1A', '\a', '\"', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\v', '\x2', '\x2', '\x17', '\x19', '\a', '\"', '\x2', '\x2', 
		'\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x15', '\x3', '\x2', '\x2', '\x2', '\x1E', '$', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\t', '\x2', '\x2', '\x2', ' ', 
		'$', '\x5', '\x2', '\x2', '\v', '!', '\"', '\t', '\x3', '\x2', '\x2', 
		'\"', '$', '\x5', '\x2', '\x2', '\x5', '#', '\n', '\x3', '\x2', '\x2', 
		'\x2', '#', '\f', '\x3', '\x2', '\x2', '\x2', '#', '\r', '\x3', '\x2', 
		'\x2', '\x2', '#', '\xE', '\x3', '\x2', '\x2', '\x2', '#', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '#', '\x13', '\x3', '\x2', '\x2', '\x2', '#', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '$', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '%', '&', '\f', '\n', '\x2', '\x2', 
		'&', '\'', '\t', '\x4', '\x2', '\x2', '\'', '\x43', '\x5', '\x2', '\x2', 
		'\v', '(', ')', '\f', '\t', '\x2', '\x2', ')', '*', '\a', '\r', '\x2', 
		'\x2', '*', '\x43', '\x5', '\x2', '\x2', '\n', '+', ',', '\f', '\b', '\x2', 
		'\x2', ',', '-', '\a', '\f', '\x2', '\x2', '-', '\x43', '\x5', '\x2', 
		'\x2', '\t', '.', '/', '\f', '\a', '\x2', '\x2', '/', '\x30', '\a', '\x10', 
		'\x2', '\x2', '\x30', '\x43', '\x5', '\x2', '\x2', '\b', '\x31', '\x32', 
		'\f', '\x6', '\x2', '\x2', '\x32', '\x33', '\t', '\x5', '\x2', '\x2', 
		'\x33', '\x43', '\x5', '\x2', '\x2', '\a', '\x34', '\x35', '\f', '\x4', 
		'\x2', '\x2', '\x35', '\x36', '\t', '\x6', '\x2', '\x2', '\x36', '\x43', 
		'\x5', '\x2', '\x2', '\x5', '\x37', '\x38', '\f', '\x3', '\x2', '\x2', 
		'\x38', '\x39', '\t', '\a', '\x2', '\x2', '\x39', '\x43', '\x5', '\x2', 
		'\x2', '\x4', ':', ';', '\f', '\xE', '\x2', '\x2', ';', '<', '\a', '\a', 
		'\x2', '\x2', '<', '=', '\x5', '\x2', '\x2', '\x2', '=', '>', '\a', '\b', 
		'\x2', '\x2', '>', '\x43', '\x3', '\x2', '\x2', '\x2', '?', '@', '\f', 
		'\r', '\x2', '\x2', '@', '\x41', '\a', '\t', '\x2', '\x2', '\x41', '\x43', 
		'\a', '\"', '\x2', '\x2', '\x42', '%', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x42', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '.', '\x3', '\x2', '\x2', '\x2', '\x42', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x34', '\x3', '\x2', '\x2', '\x2', '\x42', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x42', ':', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x3', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x44', '\x3', '\x2', '\x2', '\x2', 'G', 'L', '\x5', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\x1D', '\x2', '\x2', 'I', 'K', '\x5', '\x2', '\x2', '\x2', 
		'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', '\x5', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\a', '\x1E', '\x2', '\x2', 'P', 'Q', '\a', '\x5', '\x2', 
		'\x2', 'Q', 'R', '\x5', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x1D', '\x2', 
		'\x2', 'S', 'T', '\x5', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x6', '\x2', 
		'\x2', 'U', '_', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x1F', '\x2', 
		'\x2', 'W', 'X', '\a', '\x5', '\x2', '\x2', 'X', 'Y', '\x5', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\x6', '\x2', '\x2', 'Z', '_', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', ' ', '\x2', '\x2', '\\', ']', '\a', '\x5', '\x2', 
		'\x2', ']', '_', '\a', '\x6', '\x2', '\x2', '^', 'O', '\x3', '\x2', '\x2', 
		'\x2', '^', 'V', '\x3', '\x2', '\x2', '\x2', '^', '[', '\x3', '\x2', '\x2', 
		'\x2', '_', '\a', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\t', '\b', 
		'\x2', '\x2', '\x61', '\t', '\x3', '\x2', '\x2', '\x2', '\t', '\x1A', 
		'\x1D', '#', '\x42', '\x44', 'L', '^',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
