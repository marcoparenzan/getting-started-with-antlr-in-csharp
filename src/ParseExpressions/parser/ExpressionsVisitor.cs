//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\repos-clones\getting-started-with-antlr-in-csharp\src\ParseExpressions\Expressions.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionsParser"/>.
/// </summary>
/// <typeparam name="Expression">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IExpressionsVisitor<Expression> : IParseTreeVisitor<Expression> {
	/// <summary>
	/// Visit a parse tree produced by the <c>minus</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitMinus([NotNull] ExpressionsParser.MinusContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>jumpLiteral</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitJumpLiteral([NotNull] ExpressionsParser.JumpLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>comparison</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitComparison([NotNull] ExpressionsParser.ComparisonContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicOr</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitLogicOr([NotNull] ExpressionsParser.LogicOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>sign</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitSign([NotNull] ExpressionsParser.SignContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>subscription</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitSubscription([NotNull] ExpressionsParser.SubscriptionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>plus</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitPlus([NotNull] ExpressionsParser.PlusContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitCall([NotNull] ExpressionsParser.CallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicAnd</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitLogicAnd([NotNull] ExpressionsParser.LogicAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitBoolean([NotNull] ExpressionsParser.BooleanContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenteses</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitParenteses([NotNull] ExpressionsParser.ParentesesContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>bitXor</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitBitXor([NotNull] ExpressionsParser.BitXorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>getNode</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitGetNode([NotNull] ExpressionsParser.GetNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>attribute</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitAttribute([NotNull] ExpressionsParser.AttributeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>factor</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitFactor([NotNull] ExpressionsParser.FactorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicNot</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitLogicNot([NotNull] ExpressionsParser.LogicNotContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.argList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitArgList([NotNull] ExpressionsParser.ArgListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>alpha</c>
	/// labeled alternative in <see cref="ExpressionsParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitAlpha([NotNull] ExpressionsParser.AlphaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>beta</c>
	/// labeled alternative in <see cref="ExpressionsParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitBeta([NotNull] ExpressionsParser.BetaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>gamma</c>
	/// labeled alternative in <see cref="ExpressionsParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitGamma([NotNull] ExpressionsParser.GammaContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	Expression VisitLiteral([NotNull] ExpressionsParser.LiteralContext context);
}
