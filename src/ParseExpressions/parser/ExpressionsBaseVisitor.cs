//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\repos-clones\getting-started-with-antlr-in-csharp\src\ParseExpressions\Expressions.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IExpressionsVisitor{Expression}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Expression">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExpressionsBaseVisitor<Expression> : AbstractParseTreeVisitor<Expression>, IExpressionsVisitor<Expression> {
	/// <summary>
	/// Visit a parse tree produced by the <c>minus</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitMinus([NotNull] ExpressionsParser.MinusContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>jumpLiteral</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitJumpLiteral([NotNull] ExpressionsParser.JumpLiteralContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>comparison</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitComparison([NotNull] ExpressionsParser.ComparisonContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>logicOr</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitLogicOr([NotNull] ExpressionsParser.LogicOrContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>sign</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitSign([NotNull] ExpressionsParser.SignContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>subscription</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitSubscription([NotNull] ExpressionsParser.SubscriptionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>plus</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitPlus([NotNull] ExpressionsParser.PlusContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitCall([NotNull] ExpressionsParser.CallContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>logicAnd</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitLogicAnd([NotNull] ExpressionsParser.LogicAndContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitBoolean([NotNull] ExpressionsParser.BooleanContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>parenteses</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitParenteses([NotNull] ExpressionsParser.ParentesesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>bitXor</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitBitXor([NotNull] ExpressionsParser.BitXorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>getNode</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitGetNode([NotNull] ExpressionsParser.GetNodeContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>attribute</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitAttribute([NotNull] ExpressionsParser.AttributeContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>factor</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitFactor([NotNull] ExpressionsParser.FactorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>logicNot</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitLogicNot([NotNull] ExpressionsParser.LogicNotContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.argList"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitArgList([NotNull] ExpressionsParser.ArgListContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>alpha</c>
	/// labeled alternative in <see cref="ExpressionsParser.functionCall"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitAlpha([NotNull] ExpressionsParser.AlphaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>beta</c>
	/// labeled alternative in <see cref="ExpressionsParser.functionCall"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitBeta([NotNull] ExpressionsParser.BetaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>gamma</c>
	/// labeled alternative in <see cref="ExpressionsParser.functionCall"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitGamma([NotNull] ExpressionsParser.GammaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.literal"/>.
	/// <para>
	/// The default implementation returns the Expression of calling <see cref="AbstractParseTreeVisitor{Expression}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor Expression.</return>
	public virtual Expression VisitLiteral([NotNull] ExpressionsParser.LiteralContext context) { return VisitChildren(context); }
}
